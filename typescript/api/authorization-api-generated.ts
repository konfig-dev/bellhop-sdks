/* tslint:disable */
/* eslint-disable */
/*
partner-api

Bellhop's Partner API

The version of the OpenAPI document: 5
Contact: engineering@bellhop.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Auth0TokenRequest } from '../models';
// @ts-ignore
import { Auth0TokenResponse } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * AuthorizationApi - axios parameter creator
 * @export
 */
export const AuthorizationApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get Auth Token
         * @param {Auth0TokenRequest} auth0TokenRequest 
         * @param {boolean} [useCache] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorize: async (auth0TokenRequest: Auth0TokenRequest, useCache?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'auth0TokenRequest' is not null or undefined
            assertParamExists('createAuthorize', 'auth0TokenRequest', auth0TokenRequest)
            const localVarPath = `/authorize`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            if (useCache !== undefined) {
                localVarQueryParameter['use_cache'] = useCache;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: auth0TokenRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(auth0TokenRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthorizationApi - functional programming interface
 * @export
 */
export const AuthorizationApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthorizationApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get Auth Token
         * @param {AuthorizationApiCreateAuthorizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createAuthorize(requestParameters: AuthorizationApiCreateAuthorizeRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Auth0TokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createAuthorize(requestParameters, requestParameters.useCache, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthorizationApi - factory interface
 * @export
 */
export const AuthorizationApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthorizationApiFp(configuration)
    return {
        /**
         * 
         * @summary Get Auth Token
         * @param {AuthorizationApiCreateAuthorizeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createAuthorize(requestParameters: AuthorizationApiCreateAuthorizeRequest, options?: AxiosRequestConfig): AxiosPromise<Auth0TokenResponse> {
            return localVarFp.createAuthorize(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createAuthorize operation in AuthorizationApi.
 * @export
 * @interface AuthorizationApiCreateAuthorizeRequest
 */
export type AuthorizationApiCreateAuthorizeRequest = {
    
    /**
    * 
    * @type {boolean}
    * @memberof AuthorizationApiCreateAuthorize
    */
    readonly useCache?: boolean
    
} & Auth0TokenRequest

/**
 * AuthorizationApiGenerated - object-oriented interface
 * @export
 * @class AuthorizationApiGenerated
 * @extends {BaseAPI}
 */
export class AuthorizationApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Get Auth Token
     * @param {AuthorizationApiCreateAuthorizeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthorizationApiGenerated
     */
    public createAuthorize(requestParameters: AuthorizationApiCreateAuthorizeRequest, options?: AxiosRequestConfig) {
        return AuthorizationApiFp(this.configuration).createAuthorize(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}

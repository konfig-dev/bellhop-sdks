/* tslint:disable */
/* eslint-disable */
/*
partner-api

Bellhop's Partner API

The version of the OpenAPI document: 5
Contact: engineering@bellhop.com

NOTE: This file is auto generated by Konfig (https://konfigthis.com).
*/

import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction, isBrowser } from '../common';
import { setOAuthToObject } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { CreateLeadRequest } from '../models';
// @ts-ignore
import { HTTPValidationError } from '../models';
// @ts-ignore
import { LeadRecordType } from '../models';
// @ts-ignore
import { LeadResponse } from '../models';
// @ts-ignore
import { LeadType } from '../models';
// @ts-ignore
import { LeadUpdateRequest } from '../models';
import { paginate } from "../pagination/paginate";
import type * as buffer from "buffer"
import { requestBeforeHook } from '../requestBeforeHook';
/**
 * LeadApi - axios parameter creator
 * @export
 */
export const LeadApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Lead
         * @param {CreateLeadRequest} createLeadRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create: async (createLeadRequest: CreateLeadRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createLeadRequest' is not null or undefined
            assertParamExists('create', 'createLeadRequest', createLeadRequest)
            const localVarPath = `/leads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ImplicitBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ImplicitBearer", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: createLeadRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(createLeadRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Cancel Lead
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete: async (leadId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadId' is not null or undefined
            assertParamExists('delete', 'leadId', leadId)
            const localVarPath = `/leads/{lead_id}`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId !== undefined ? leadId : `-lead_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ImplicitBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ImplicitBearer", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Lead
         * @param {string} leadId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get: async (leadId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadId' is not null or undefined
            assertParamExists('get', 'leadId', leadId)
            const localVarPath = `/leads/{lead_id}`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId !== undefined ? leadId : `-lead_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ImplicitBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ImplicitBearer", [], configuration)

    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Leads
         * @param {string} [email] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list: async (email?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/leads`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ImplicitBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ImplicitBearer", [], configuration)
            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }


    
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update attributes of a lead.  :lead_id: The ID of the lead to update. This can be either the bellhop id or the external_id.
         * @summary Update Lead
         * @param {string} leadId 
         * @param {LeadUpdateRequest} leadUpdateRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update: async (leadId: string, leadUpdateRequest: LeadUpdateRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'leadId' is not null or undefined
            assertParamExists('update', 'leadId', leadId)
            // verify required parameter 'leadUpdateRequest' is not null or undefined
            assertParamExists('update', 'leadUpdateRequest', leadUpdateRequest)
            const localVarPath = `/leads/{lead_id}`
                .replace(`{${"lead_id"}}`, encodeURIComponent(String(leadId !== undefined ? leadId : `-lead_id-`)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions: AxiosRequestConfig = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = configuration && !isBrowser() ? { "User-Agent": configuration.userAgent } : {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2ImplicitBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2ImplicitBearer", [], configuration)

    
            localVarHeaderParameter['Content-Type'] = 'application/json';


            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            requestBeforeHook({
                requestBody: leadUpdateRequest,
                queryParameters: localVarQueryParameter,
                requestConfig: localVarRequestOptions,
                path: localVarPath,
                configuration
            });
            localVarRequestOptions.data = serializeDataIfNeeded(leadUpdateRequest, localVarRequestOptions, configuration)

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * LeadApi - functional programming interface
 * @export
 */
export const LeadApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = LeadApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Lead
         * @param {LeadApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async create(requestParameters: LeadApiCreateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.create(requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Cancel Lead
         * @param {LeadApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async delete(requestParameters: LeadApiDeleteRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.delete(requestParameters.leadId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Get Lead
         * @param {LeadApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async get(requestParameters: LeadApiGetRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.get(requestParameters.leadId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary List Leads
         * @param {LeadApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async list(requestParameters: LeadApiListRequest = {}, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<LeadResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.list(requestParameters.email, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Update attributes of a lead.  :lead_id: The ID of the lead to update. This can be either the bellhop id or the external_id.
         * @summary Update Lead
         * @param {LeadApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async update(requestParameters: LeadApiUpdateRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LeadResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.update(requestParameters.leadId, requestParameters, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * LeadApi - factory interface
 * @export
 */
export const LeadApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = LeadApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Lead
         * @param {LeadApiCreateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        create(requestParameters: LeadApiCreateRequest, options?: AxiosRequestConfig): AxiosPromise<LeadResponse> {
            return localVarFp.create(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Cancel Lead
         * @param {LeadApiDeleteRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        delete(requestParameters: LeadApiDeleteRequest, options?: AxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.delete(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Lead
         * @param {LeadApiGetRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        get(requestParameters: LeadApiGetRequest, options?: AxiosRequestConfig): AxiosPromise<LeadResponse> {
            return localVarFp.get(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Leads
         * @param {LeadApiListRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        list(requestParameters: LeadApiListRequest = {}, options?: AxiosRequestConfig): AxiosPromise<Array<LeadResponse>> {
            return localVarFp.list(requestParameters, options).then((request) => request(axios, basePath));
        },
        /**
         * Update attributes of a lead.  :lead_id: The ID of the lead to update. This can be either the bellhop id or the external_id.
         * @summary Update Lead
         * @param {LeadApiUpdateRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        update(requestParameters: LeadApiUpdateRequest, options?: AxiosRequestConfig): AxiosPromise<LeadResponse> {
            return localVarFp.update(requestParameters, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for create operation in LeadApi.
 * @export
 * @interface LeadApiCreateRequest
 */
export type LeadApiCreateRequest = {
    
} & CreateLeadRequest

/**
 * Request parameters for delete operation in LeadApi.
 * @export
 * @interface LeadApiDeleteRequest
 */
export type LeadApiDeleteRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LeadApiDelete
    */
    readonly leadId: string
    
}

/**
 * Request parameters for get operation in LeadApi.
 * @export
 * @interface LeadApiGetRequest
 */
export type LeadApiGetRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LeadApiGet
    */
    readonly leadId: string
    
}

/**
 * Request parameters for list operation in LeadApi.
 * @export
 * @interface LeadApiListRequest
 */
export type LeadApiListRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LeadApiList
    */
    readonly email?: string
    
}

/**
 * Request parameters for update operation in LeadApi.
 * @export
 * @interface LeadApiUpdateRequest
 */
export type LeadApiUpdateRequest = {
    
    /**
    * 
    * @type {string}
    * @memberof LeadApiUpdate
    */
    readonly leadId: string
    
} & LeadUpdateRequest

/**
 * LeadApiGenerated - object-oriented interface
 * @export
 * @class LeadApiGenerated
 * @extends {BaseAPI}
 */
export class LeadApiGenerated extends BaseAPI {
    /**
     * 
     * @summary Create Lead
     * @param {LeadApiCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApiGenerated
     */
    public create(requestParameters: LeadApiCreateRequest, options?: AxiosRequestConfig) {
        return LeadApiFp(this.configuration).create(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Cancel Lead
     * @param {LeadApiDeleteRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApiGenerated
     */
    public delete(requestParameters: LeadApiDeleteRequest, options?: AxiosRequestConfig) {
        return LeadApiFp(this.configuration).delete(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Lead
     * @param {LeadApiGetRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApiGenerated
     */
    public get(requestParameters: LeadApiGetRequest, options?: AxiosRequestConfig) {
        return LeadApiFp(this.configuration).get(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Leads
     * @param {LeadApiListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApiGenerated
     */
    public list(requestParameters: LeadApiListRequest = {}, options?: AxiosRequestConfig) {
        return LeadApiFp(this.configuration).list(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update attributes of a lead.  :lead_id: The ID of the lead to update. This can be either the bellhop id or the external_id.
     * @summary Update Lead
     * @param {LeadApiUpdateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof LeadApiGenerated
     */
    public update(requestParameters: LeadApiUpdateRequest, options?: AxiosRequestConfig) {
        return LeadApiFp(this.configuration).update(requestParameters, options).then((request) => request(this.axios, this.basePath));
    }
}
